// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema/track.proto

package no_sysco_middleware_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Track struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ArtistId             string   `protobuf:"bytes,3,opt,name=artistId,proto3" json:"artistId,omitempty"`
	AlbumId              string   `protobuf:"bytes,4,opt,name=albumId,proto3" json:"albumId,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Duration             float64  `protobuf:"fixed64,6,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_track_5ae6571c771db6f2, []int{0}
}
func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (dst *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(dst, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Track) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Track) GetArtistId() string {
	if m != nil {
		return m.ArtistId
	}
	return ""
}

func (m *Track) GetAlbumId() string {
	if m != nil {
		return m.AlbumId
	}
	return ""
}

func (m *Track) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Track) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type SimpleTrackRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleTrackRequest) Reset()         { *m = SimpleTrackRequest{} }
func (m *SimpleTrackRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleTrackRequest) ProtoMessage()    {}
func (*SimpleTrackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_track_5ae6571c771db6f2, []int{1}
}
func (m *SimpleTrackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTrackRequest.Unmarshal(m, b)
}
func (m *SimpleTrackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTrackRequest.Marshal(b, m, deterministic)
}
func (dst *SimpleTrackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTrackRequest.Merge(dst, src)
}
func (m *SimpleTrackRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleTrackRequest.Size(m)
}
func (m *SimpleTrackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTrackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTrackRequest proto.InternalMessageInfo

func (m *SimpleTrackRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Track)(nil), "no.sysco.middleware.grpc.Track")
	proto.RegisterType((*SimpleTrackRequest)(nil), "no.sysco.middleware.grpc.SimpleTrackRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackServiceClient interface {
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TrackService_GetAllClient, error)
	GetTrackByAlbum(ctx context.Context, in *SimpleTrackRequest, opts ...grpc.CallOption) (TrackService_GetTrackByAlbumClient, error)
	GetTrackByArtist(ctx context.Context, in *SimpleTrackRequest, opts ...grpc.CallOption) (TrackService_GetTrackByArtistClient, error)
}

type trackServiceClient struct {
	cc *grpc.ClientConn
}

func NewTrackServiceClient(cc *grpc.ClientConn) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TrackService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrackService_serviceDesc.Streams[0], "/no.sysco.middleware.grpc.TrackService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackService_GetAllClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type trackServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *trackServiceGetAllClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackServiceClient) GetTrackByAlbum(ctx context.Context, in *SimpleTrackRequest, opts ...grpc.CallOption) (TrackService_GetTrackByAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrackService_serviceDesc.Streams[1], "/no.sysco.middleware.grpc.TrackService/GetTrackByAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackServiceGetTrackByAlbumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackService_GetTrackByAlbumClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type trackServiceGetTrackByAlbumClient struct {
	grpc.ClientStream
}

func (x *trackServiceGetTrackByAlbumClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackServiceClient) GetTrackByArtist(ctx context.Context, in *SimpleTrackRequest, opts ...grpc.CallOption) (TrackService_GetTrackByArtistClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrackService_serviceDesc.Streams[2], "/no.sysco.middleware.grpc.TrackService/GetTrackByArtist", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackServiceGetTrackByArtistClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrackService_GetTrackByArtistClient interface {
	Recv() (*Track, error)
	grpc.ClientStream
}

type trackServiceGetTrackByArtistClient struct {
	grpc.ClientStream
}

func (x *trackServiceGetTrackByArtistClient) Recv() (*Track, error) {
	m := new(Track)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackServiceServer is the server API for TrackService service.
type TrackServiceServer interface {
	GetAll(*empty.Empty, TrackService_GetAllServer) error
	GetTrackByAlbum(*SimpleTrackRequest, TrackService_GetTrackByAlbumServer) error
	GetTrackByArtist(*SimpleTrackRequest, TrackService_GetTrackByArtistServer) error
}

func RegisterTrackServiceServer(s *grpc.Server, srv TrackServiceServer) {
	s.RegisterService(&_TrackService_serviceDesc, srv)
}

func _TrackService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackServiceServer).GetAll(m, &trackServiceGetAllServer{stream})
}

type TrackService_GetAllServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type trackServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *trackServiceGetAllServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackService_GetTrackByAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackServiceServer).GetTrackByAlbum(m, &trackServiceGetTrackByAlbumServer{stream})
}

type TrackService_GetTrackByAlbumServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type trackServiceGetTrackByAlbumServer struct {
	grpc.ServerStream
}

func (x *trackServiceGetTrackByAlbumServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

func _TrackService_GetTrackByArtist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackServiceServer).GetTrackByArtist(m, &trackServiceGetTrackByArtistServer{stream})
}

type TrackService_GetTrackByArtistServer interface {
	Send(*Track) error
	grpc.ServerStream
}

type trackServiceGetTrackByArtistServer struct {
	grpc.ServerStream
}

func (x *trackServiceGetTrackByArtistServer) Send(m *Track) error {
	return x.ServerStream.SendMsg(m)
}

var _TrackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "no.sysco.middleware.grpc.TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _TrackService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrackByAlbum",
			Handler:       _TrackService_GetTrackByAlbum_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrackByArtist",
			Handler:       _TrackService_GetTrackByArtist_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema/track.proto",
}

func init() { proto.RegisterFile("schema/track.proto", fileDescriptor_track_5ae6571c771db6f2) }

var fileDescriptor_track_5ae6571c771db6f2 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0x6c, 0xab, 0x8e, 0xa2, 0x32, 0x82, 0x84, 0x7a, 0xb0, 0x14, 0x0f, 0x3d, 0xc8,
	0x46, 0xf4, 0x09, 0x5a, 0x95, 0xd2, 0x6b, 0xeb, 0x0b, 0x6c, 0x76, 0xa7, 0x75, 0x31, 0xc9, 0xc6,
	0xdd, 0x8d, 0xd2, 0x77, 0x11, 0x7c, 0x55, 0xc9, 0x94, 0x96, 0xa2, 0x14, 0x3c, 0x78, 0xcb, 0x37,
	0xff, 0xbe, 0x2f, 0x3f, 0x16, 0xd0, 0xab, 0x17, 0x2a, 0x64, 0x1a, 0x9c, 0x54, 0xaf, 0xa2, 0x72,
	0x36, 0x58, 0x4c, 0x4a, 0x2b, 0xfc, 0xd2, 0x2b, 0x2b, 0x0a, 0xa3, 0x75, 0x4e, 0x1f, 0xd2, 0x91,
	0x58, 0xb8, 0x4a, 0x75, 0x2f, 0x17, 0xd6, 0x2e, 0x72, 0x4a, 0x79, 0x2e, 0xab, 0xe7, 0x29, 0x15,
	0x55, 0x58, 0xae, 0xd6, 0xfa, 0x5f, 0x11, 0xb4, 0x9f, 0x9b, 0x33, 0x78, 0x02, 0xb1, 0xd1, 0x49,
	0xd4, 0x8b, 0x06, 0x87, 0xd3, 0xd8, 0x68, 0x44, 0x68, 0x95, 0xb2, 0xa0, 0x24, 0xe6, 0x0a, 0x7f,
	0x63, 0x17, 0x0e, 0xa4, 0x0b, 0xc6, 0x87, 0x89, 0x4e, 0xf6, 0xb8, 0xbe, 0xd1, 0x98, 0xc0, 0xbe,
	0xcc, 0xb3, 0xba, 0x98, 0xe8, 0xa4, 0xc5, 0xad, 0xb5, 0xc4, 0x1e, 0x1c, 0x69, 0xf2, 0xca, 0x99,
	0x2a, 0x18, 0x5b, 0x26, 0x6d, 0xee, 0x6e, 0x97, 0x9a, 0xbb, 0xba, 0x76, 0x92, 0xdb, 0x9d, 0x5e,
	0x34, 0x88, 0xa6, 0x1b, 0xdd, 0xbf, 0x06, 0x9c, 0x99, 0xa2, 0xca, 0x89, 0x63, 0x4e, 0xe9, 0xad,
	0x26, 0x1f, 0x7e, 0xa6, 0xbd, 0xfb, 0x8c, 0xe1, 0x98, 0x07, 0x66, 0xe4, 0xde, 0x8d, 0x22, 0x7c,
	0x80, 0xce, 0x98, 0xc2, 0x30, 0xcf, 0xf1, 0x42, 0xac, 0x00, 0x88, 0x35, 0x00, 0xf1, 0xd4, 0x00,
	0xe8, 0x5e, 0x89, 0x5d, 0xc8, 0x04, 0x5f, 0xba, 0x8d, 0x30, 0x83, 0xd3, 0x31, 0x05, 0x56, 0xa3,
	0xe5, 0xb0, 0xf9, 0x1d, 0xbc, 0xd9, 0xbd, 0xf5, 0x3b, 0xe6, 0x5f, 0x3c, 0x14, 0x9c, 0x6d, 0x79,
	0x30, 0xcd, 0x7f, 0x37, 0x19, 0xa5, 0xb0, 0xf3, 0x7d, 0x8c, 0xce, 0x57, 0xde, 0xd2, 0xd3, 0x23,
	0xcd, 0x4d, 0x69, 0x1a, 0xea, 0x59, 0x87, 0x61, 0xdd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa8,
	0x2b, 0xc4, 0x75, 0x6b, 0x02, 0x00, 0x00,
}
